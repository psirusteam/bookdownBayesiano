{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
# C\'f3digos en R para el ejemplo 3.3.1. En JAGS\
#\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
set.seed(123456)\
n <- 10\
mu<- as.vector(c(0,1)); Gamma <- matrix(c(2,0,0,2),2,2)\
v <- 10; Lambda <- matrix(c(20,8,8,20),2,2)\
\
NormMult2.model <- function()\{\
for(i in 1 : n)\
\{\
  y[i, 1:2] ~ dmnorm(theta[], Tau[,])	\
\}\
theta[1:2] ~ dmnorm(mu[], Gamma[,])\
Tau[1:2,1:2] ~ dwish(Lambda[,] , v) \
Sigma[1:2,1:2] <- inverse(Tau[,])\
\}\
\
y <- structure(.Data = sleep[,1], .Dim=c(10,2))\
\
NormMult2.data <- list("y","n","mu","Gamma", "Lambda","v")\
NormMult2.param <- c("theta", "Sigma")\
NormMult2.inits <- function()\{\
list("theta"=c(0,0),"Tau"=diag(rep(1,2)))\
\}\
\
NormMult2.fit <- jags(data=NormMult2.data, inits=NormMult2.inits, NormMult2.param, \
                      n.iter=10000, n.burnin=1000, model.file=NormMult2.model)\
\
print(NormMult2.fit)\
\
\
#\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
# C\'f3digos en R para el ejemplo 3.2.1. En R\
#\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
library(MCMCpack)\
library(mvtnorm)\
y <- as.matrix(data.frame(M1=sleep[1:10,1], M2=sleep[-(1:10),1]))\
y.bar <- colMeans(y)\
n <- nrow(y)\
\
#parametros previos de theta\
mu<- as.vector(c(0,1)); Gamma <- matrix(c(2,0,0,2),2,2)\
#parametros previos de Sigma\
v <- 10\
Lambda <- matrix(c(20,8,8,20),2,2); Lambda.inv <- solve(Lambda)\
\
nsim <- 10000\
theta.pos <- matrix(NA,nsim,2)\
Sigma.pos <- array(NA,c(nsim,2,2))\
\
# Valor inicial de theta\
theta.pos[1,] <- c(0,1)\
\
#parametros posteriores de Sigma\
v.pos <- v + n\
matrix.theta <- kronecker(matrix(rep(1,n)),t(theta.pos[1,])) \
S.theta <- t(y-matrix.theta) %*% (y-matrix.theta)\
Lambda.pos <- Lambda + S.theta\
#simulacion de la distribucion posterior condicional de Sigma\
Sigma.pos[1,,] <- riwish(v.pos, Lambda.pos)\
\
########################\
# Muestreador de Gibbs #\
########################\
for(i in 2:nsim)\{\
  #parametros posteriores de theta	\
  Gamma.n <- solve(solve(Gamma) + n*solve(Sigma.pos[i-1,,]))\
  mu.n <- Gamma.n%*%(solve(Gamma)%*%mu + n*solve(Sigma.pos[i-1,,])%*%y.bar)\
  #simulacion de la distribucion posterior condicional de theta\
  theta.pos[i,] <- rmvnorm(1, mu.n, Gamma.n)\
  #parametros posteriores de Sigma\
  v.pos <- v + n\
  matrix.theta <- kronecker(matrix(rep(1,n)),t(theta.pos[1,])) \
  S.theta <- t(y-matrix.theta)%*%(y-matrix.theta)\
  Lambda.pos <- Lambda + S.theta\
  #simulacion de la distribucion posterior condicional de Sigma\
  Sigma.pos[i,,] <- riwish(v.pos, Lambda.pos)\
\}}